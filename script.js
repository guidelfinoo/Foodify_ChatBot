// script.js

// Elementos do DOM
const chat = document.getElementById("chat");
const input = document.getElementById("userInput");
const sendBtn = document.getElementById("sendBtn");  // bot√£o ‚ÄúEnviar‚Äù deve ter id="sendBtn"

// Configura√ß√µes de clima (opcional)
const apiKey = "a86e1e1a4af94726959191600252605";
const cidade = "Ourinhos";

// 1) Envia a mensagem do usu√°rio
function sendMessage() {
  const text = input.value.trim();
  if (!text) return;
  appendMessage("user", text);
  input.value = "";
  processMessage(text.toLowerCase());
}

// 2) Adiciona mensagem no chat
function appendMessage(sender, text) {
  const msg = document.createElement("div");
  msg.className = sender; // "user" ou "bot"
  msg.textContent = text;
  chat.appendChild(msg);
  chat.scrollTop = chat.scrollHeight;
}

// 3) Voz (opcional)
function speak(text) {
  if (!window.speechSynthesis) return;
  const utter = new SpeechSynthesisUtterance(text);
  utter.lang = 'pt-BR';
  window.speechSynthesis.speak(utter);
}

// 4) Processa mensagem: busca clima e gera resposta
async function processMessage(msg) {
  let temp = null;
  try {
    const res = await fetch(
      `http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${cidade}&aqi=no`
    );
    const data = await res.json();
    temp = data.current.temp_c;
  } catch (e) {
    console.warn("N√£o foi poss√≠vel obter o clima:", e);
  }

  const resposta = gerarResposta(msg, temp);
  appendMessage("bot", resposta);
  speak(resposta);
}

// 5) Utilit√°rio: verifica se msg cont√©m qualquer palavra da lista
function contains(msg, lista) {
  return lista.some(p => msg.includes(p));
}

// 6) Retorna um elemento aleat√≥rio de um array
function aleatoria(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// 7) Gera resposta com m√∫ltiplas op√ß√µes em cada categoria
function gerarResposta(msg, temp) {
  const opcoes = {
    saudacoes: [
      "oi", "ol√°", "ola", "e a√≠", "fala", "falaa", "bom dia",
      "boa tarde", "boa noite", "salve", "opa", "ae", "blz",
      "beleza", "tudo bem", "td bem", "td bom", "bom"
    ],
    doces: [
      "doce", "docinho", "sobremesa", "milkshake", "a√ß√∫car", "a√ßucar",
      "bolo", "pudim", "mousse", "a√ßa√≠ doce", "sorvete", "gostosura",
      "gordice", "del√≠cia", "chocolate", "nutella", "coisa doce",
      "quero doce", "algo doce", "sobremesinha", "brigadeiro"
    ],
    leves: [
      "leve", "refrescante", "salada", "saladinha", "coisa leve",
      "comida leve", "nada pesado", "algo leve", "quero algo leve",
      "comer pouco", "coisa saud√°vel", "comida fit", "fit", "fitness",
      "refei√ß√£o leve", "light", "natural", "saud√°vel"
    ],
    quentes: [
      "quente", "quentinho", "esquentar", "comida quente",
      "comidinha quente", "quent√£o", "quentura", "t√¥ com frio",
      "preciso me aquecer", "aquecido", "quentinha", "coisa quente",
      "quent√£ozinho", "quentin", "esquenta a√≠"
    ],
    frios: [
      "frio", "gelado", "refrescante", "bebida gelada", "calor",
      "quente demais", "quero me refrescar", "coisa fria", "algo gelado",
      "bebidinha gelada", "geladinho", "refrescar", "calorz√£o",
      "t√° quente", "calorzinho", "refrigerado"
    ],
    semLactose: [
      "sem lactose", "intoler√¢ncia", "sem leite", "intolerante a lactose",
      "lactose free", "sem derivados do leite", "d√° alergia",
      "nada com leite", "sem derivado", "sem queijo", "sem nata",
      "sem creme de leite"
    ],
    vegetarianos: [
      "vegetariano", "vegano", "sem carne", "nada de carne",
      "plant based", "s√≥ vegetal", "sem prote√≠na animal",
      "comida vegana", "prato veg", "sem bicho", "refei√ß√£o veg",
      "veggie", "verde", "salada com gr√£o", "feij√£o com legumes"
    ],
    pressa: [
      "com pressa", "vai demorar", "tempo de espera", "r√°pido",
      "r√°pida", "demora", "atrasado", "sem tempo", "express",
      "correria", "pra j√°", "agilidade", "tem como ser r√°pido",
      "correndo", "atende r√°pido", "to na correria"
    ],
    recomendacao: [
      "me recomenda", "o que voc√™ sugere", "sugest√£o",
      "n√£o sei o que pedir", "dica", "me ajuda escolher",
      "n√£o decidi", "o que tem de bom", "me indica", "sugira algo",
      "escolhe pra mim", "me surpreenda", "quero uma dica", "me ajuda"
    ],
    bebidas: [
      "suco", "refrigerante", "refri", "bebida", "√°gua", "agua",
      "a√ßa√≠", "acai", "milkshake", "smoothie", "bebidinha",
      "coisa pra beber", "gelado pra beber", "l√≠quido", "sede",
      "t√¥ com sede", "drink", "bebidas", "√°gua com g√°s", "suquinho"
    ],
    despedidas: [
      "tchau", "valeu", "at√© mais", "at√© logo", "at√© breve",
      "fui", "xau", "at√©", "obrigado", "obrigada", "agradecido",
      "vlw", "flw", "falou", "at√© amanh√£", "encerra", "termina",
      "finaliza", "isso √© tudo", "j√° pedi", "s√≥ isso"
    ]
  };

  // Sauda√ß√£o
  if (contains(msg, opcoes.saudacoes)) {
    return aleatoria([
      "Ol√°! üòÑ Est√° com fome? Posso sugerir um lanche incr√≠vel!",
      "Oi! Bem-vindo! Temos hamb√∫rgueres artesanais e sobremesas deliciosas!",
      "Salve! Que tal um combo completo com bebida, fritas e sobremesa?",
      "Fala a√≠! Quer conhecer nosso lanche mais pedido?"
    ]);
  }

  // Doces
  if (contains(msg, opcoes.doces)) {
    return aleatoria([
      "Temos sobremesas incr√≠veis como Milkshake de Doce de Leite e Ta√ßa Oreo!",
      "Voc√™ vai adorar nosso Brownie de Chocolate ou o Pudim de Leite Ninho com Nutella!",
      "Que tal um Milkshake de Morango ou uma Ta√ßa Cookies para ado√ßar seu dia?",
      "Nosso Mousse de Chocolate e Milkshake de Ovomaltine s√£o puro prazer!"
    ]);
  }

  // Leves
  if (contains(msg, opcoes.leves)) {
    return aleatoria([
      "O Salada Burguer √© uma √≥tima op√ß√£o leve, acompanhado de √°gua.",
      "Prefere algo leve e saboroso? V√° de Piemonte com Sprite!",
      "Nosso Provolone Empanado com H2O Citrus combina sabor e leveza.",
      "Uma boa pedida leve: Porky Crispy com bolinho de costela e H2O!"
    ]);
  }

  // Quentes
  if (contains(msg, opcoes.quentes)) {
    if (temp !== null && temp < 18) {
      return "Dia frio? Vai de Cheddar Bacon BBQ com fritas e milkshake de Nutella pra esquentar! üî•";
    }
    return aleatoria([
      "O Galic Burguer quentinho com fritas e Guaran√° vai te aquecer bem!",
      "Experimente o Bacon Egg com iscas de frango e suco natural. Muito sabor!",
      "Nosso Pomodori com frango e cheddar √© puro conforto em forma de lanche."
    ]);
  }

  // Frios
  if (contains(msg, opcoes.frios)) {
    if (temp !== null && temp > 28) {
      return "T√° quente a√≠? Refresque-se com nosso Milkshake de Morango ou Ta√ßa Oreo! ‚ùÑÔ∏è";
    }
    return aleatoria([
      "Uma bebida gelada como Suco de Abacaxi com o Tasty Burguer √© perfeita!",
      "Sprite, H2O ou Schweppes Citrus s√£o √≥timas pedidas refrescantes!",
      "Que tal um Milkshake de Ovomaltine com Nuggets para refrescar e curtir?"
    ]);
  }

  // Sem lactose
  if (contains(msg, opcoes.semLactose)) {
    return aleatoria([
      "Temos op√ß√µes como batatas r√∫sticas com provolone ou onion rings, sem lactose!",
      "Nosso Piemonte √© uma boa escolha com ingredientes mais leves.",
      "Milkshakes e sobremesas com leite podem conter lactose, mas temos sugest√µes alternativas."
    ]);
  }

  // Vegetarianos
  if (contains(msg, opcoes.vegetarianos)) {
    return aleatoria([
      "Nosso Salada Burguer √© uma √≥tima escolha sem carne vermelha!",
      "Voc√™ pode montar um combo com batatas r√∫sticas, √°gua e sobremesa sem prote√≠na animal.",
      "Quer algo sem carne? Provo Bacon ou Provolone Empanado s√£o op√ß√µes mais leves!"
    ]);
  }

  // Pressa
  if (contains(msg, opcoes.pressa)) {
    return aleatoria([
    "Combo r√°pido? V√° de Bacon Egg com suco de abacaxi e fritas, sai rapidinho!",
    "Tasty Burguer com batata e refrigerante costuma ficar pronto em minutos!",
    "Est√° com pressa? O Galic Burguer + Guaran√° + fritas √© uma solu√ß√£o r√°pida e deliciosa!",
    "Fome urgente? O combo do Galic Burguer com refrigerante e batata √© super r√°pido!",
    "Vai voando? J√° prepara o pedido: Salada Burguer, refrigerante lata e fritas simples ‚Äî combo r√°pido e leve!"
    ]);
  }

  // Recomenda√ß√£o
  if (contains(msg, opcoes.recomendacao)) {
    return aleatoria([
      "Nosso combo favorito: Ranch Burguer + Coca-Cola Lata + Fritas Mussarela e Bacon + Milkshake de Ovomaltine! üòã",
      "Quer algo diferente? Provolone Empanado + R√∫stica Gorgonzola + Milkshake de Nutella!",
      "Indico o Pomodori com suco de laranja e sobremesa especial de Ovomaltine!",
      "Vai de Geleia Bacon + Monster + Nuggets + Milkshake de Doce de Leite!"
    ]);
  }

  // Bebidas
  if (contains(msg, opcoes.bebidas)) {
    return aleatoria([
      "Temos suco de abacaxi, suco de laranja, Coca, Guaran√°, Fanta, Sprite, H2O e muito mais!",
    "Prefere algo energ√©tico? Temos Monster e Schweppes Citrus!",
    "Quer refrescar? √Ågua com g√°s, sucos naturais ou milkshakes est√£o te esperando!",
    "Nossa carta de bebidas vai de sucos naturais at√© refrigerantes cl√°ssicos como Fanta e Coca-Cola!",
    "Tem sede? Temos Schweppes Citrus, Monster, Sprite Zero e H2O para todos os gostos!",
    "Experimente um suco de laranja natural geladinho ou uma Coca bem trincando de gelo! üßä",
    "Pode pedir √°gua, refri, suco ou at√© Monster. Temos bebida pra qualquer momento do dia!"
    ]);
  }

  // Despedidas
  if (contains(msg, opcoes.despedidas)) {
    return aleatoria([
      "Obrigado! Volte sempre para saborear nossos combos incr√≠veis! üçîü•§üç®",
      "Valeu pela visita! Se bater a fome de novo, √© s√≥ chamar!",
      "At√© mais! Que seu dia seja t√£o bom quanto nosso milkshake de Nutella! üòÑ"
    ]);
  }

  // Fallback padr√£o
  return aleatoria([
    "Desculpa, n√£o entendi. Pode repetir? ü§î",
    "N√£o consegui compreender, poderia reformular? ü§ñ",
    "Ainda estou aprendendo, fala de outro jeito?"
  ]);
}

// 8) Eventos de clique e Enter
sendBtn.addEventListener("click", sendMessage);
input.addEventListener("keydown", e => {
  if (e.key === "Enter") sendMessage();
});
// 8) Reconhecimento de voz
const voiceBtn = document.getElementById("voiceBtn");

// Verifica suporte
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

if (SpeechRecognition) {
  const recognition = new SpeechRecognition();
  recognition.lang = 'pt-BR';
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;

  voiceBtn.addEventListener("click", () => {
    recognition.start();
    voiceBtn.textContent = "üéôÔ∏è...";
  });

  recognition.addEventListener("result", (event) => {
    const speech = event.results[0][0].transcript;
    appendMessage("user", speech);  // envia direto a fala como mensagem do usu√°rio
    processMessage(speech.toLowerCase());
  });

  recognition.addEventListener("end", () => {
    voiceBtn.textContent = "üé§";
  });

  recognition.addEventListener("error", (event) => {
    console.error("Erro no reconhecimento de voz:", event.error);
    voiceBtn.textContent = "üé§";
  });
} else {
  voiceBtn.disabled = true;
  voiceBtn.title = "Reconhecimento de voz n√£o suportado neste navegador.";
}
